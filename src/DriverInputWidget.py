# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\designer\DriverInputWidget.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget, QPushButton, QHBoxLayout, QVBoxLayout, QBoxLayout, QGridLayout, QLabel, QApplication, QGraphicsDropShadowEffect


class Ui_DriverInputWidget(QWidget):
    ThrottleValue = 0
    BoostValue = 0
    BrakeValue = 0
    HandbrakeValue = 0

    ShowingYellowIndicator = False
    YellowIndicatorDelayCounter = 0

    def __init__(self):
        super().__init__()
        self.setFixedSize(1536, 128)
        self.setupUi(self)
        self.UpdateBarsTimer = QtCore.QTimer()
        self.UpdateBarsTimer.timeout.connect(self.UpdateBars)
        self.UpdateBarsTimer.start(100)

    def setupUi(self, DriverInputWidget):
        DriverInputWidget.setObjectName("DriverInputWidget")
        DriverInputWidget.resize(1536, 128)
        self.verticalLayoutWidget = QtWidgets.QWidget(DriverInputWidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 1536, 128))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setMinimumSize(QtCore.QSize(0, 25))
        self.label_2.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setMinimumSize(QtCore.QSize(0, 25))
        self.label.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.BrakeBar = QtWidgets.QProgressBar(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.BrakeBar.sizePolicy().hasHeightForWidth())
        self.BrakeBar.setSizePolicy(sizePolicy)
        self.BrakeBar.setMinimumSize(QtCore.QSize(0, 50))
        self.BrakeBar.setStyleSheet("QProgressBar {\n"
"background-color: grey;\n"
"border-style: none;\n"
"}\n"
"\n"
"QProgressBar::chunk {\n"
"background-color: red;\n"
"}")
        self.BrakeBar.setProperty("value", 24)
        self.BrakeBar.setTextVisible(False)
        self.BrakeBar.setInvertedAppearance(True)
        self.BrakeBar.setObjectName("BrakeBar")
        self.horizontalLayout.addWidget(self.BrakeBar)
        self.ThrottleBar = QtWidgets.QProgressBar(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ThrottleBar.sizePolicy().hasHeightForWidth())
        self.ThrottleBar.setSizePolicy(sizePolicy)
        self.ThrottleBar.setMinimumSize(QtCore.QSize(0, 50))
        self.ThrottleBar.setStyleSheet("QProgressBar {\n"
"background-color: grey;\n"
"border-style: none;\n"
"}\n"
"\n"
"QProgressBar::chunk {\n"
"background-color: #28CE00;\n"
"}")
        self.ThrottleBar.setProperty("value", 24)
        self.ThrottleBar.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.ThrottleBar.setTextVisible(False)
        self.ThrottleBar.setInvertedAppearance(False)
        self.ThrottleBar.setObjectName("ThrottleBar")
        self.horizontalLayout.addWidget(self.ThrottleBar)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.BoostBar = QtWidgets.QProgressBar(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.BoostBar.sizePolicy().hasHeightForWidth())
        self.BoostBar.setSizePolicy(sizePolicy)
        self.BoostBar.setMinimumSize(QtCore.QSize(0, 25))
        self.BoostBar.setStyleSheet("QProgressBar {\n"
"background-color: grey;\n"
"border-style: none;\n"
"}\n"
"\n"
"QProgressBar::chunk {\n"
"background-color: blue;\n"
"}")
        self.BoostBar.setProperty("value", 24)
        self.BoostBar.setTextVisible(False)
        self.BoostBar.setObjectName("BoostBar")
        self.BoostBar.setRange(-11, 20)
        self.verticalLayout.addWidget(self.BoostBar)
        self.label_3 = QtWidgets.QLabel(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)

        self.retranslateUi(DriverInputWidget)
        QtCore.QMetaObject.connectSlotsByName(DriverInputWidget)

    def retranslateUi(self, DriverInputWidget):
        _translate = QtCore.QCoreApplication.translate
        DriverInputWidget.setWindowTitle(_translate("DriverInputWidget", "Form"))
        self.label_2.setText(_translate("DriverInputWidget", "BRAKE"))
        self.label.setText(_translate("DriverInputWidget", "THROTTLE"))
        self.label_3.setText(_translate("DriverInputWidget", "BOOST"))

    def OnTelemetryData(self, data):
        if data['is_race_on'] == 1.0:
            # update data
            self.ThrottleValue = int(float(data['accel'] / 255.0) * 100)
            self.BrakeValue = int(float(data['brake'] / 255.0) * 100)
            self.BoostValue = int(data['boost'])
            self.HandbrakeValue = int(float(data['handbrake'] / 255.0) * 100)

    def UpdateBars(self):
        self.ThrottleBar.setValue(self.ThrottleValue)
        self.BrakeBar.setValue(self.BrakeValue)
        self.BoostBar.setValue(self.BoostValue)
        if self.HandbrakeValue >= 100:
            if self.ShowingYellowIndicator is True:
                if self.YellowIndicatorDelayCounter >= 1: # wait another cycle to slow the indication "flashing" freq
                    self.setStyleSheet("background-color: black; color: white;")
                    self.ShowingYellowIndicator = False
                    self.YellowIndicatorDelayCounter = 0
                else:
                    self.YellowIndicatorDelayCounter += 1
            else:
                if self.YellowIndicatorDelayCounter >= 1: # wait another cycle to slow the indication "flashing" freq
                    self.setStyleSheet("background-color: yellow; color: black;")
                    self.ShowingYellowIndicator = True
                    self.YellowIndicatorDelayCounter = 0
                else:
                    self.YellowIndicatorDelayCounter += 1
        else:
            self.setStyleSheet("background-color: black; color: white;")
