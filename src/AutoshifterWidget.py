# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\designer\AutoshifterWidget.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import time
from PyQt5.QtCore import Qt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget, QPushButton, QHBoxLayout, QVBoxLayout, QBoxLayout, QApplication, QGridLayout, QLCDNumber, QScrollArea, QLabel, QTableWidget, QTableWidgetItem, QMessageBox, QShortcut
from numpy import *
from pynput.keyboard import Key, Controller
from MiscConstants import *

class Ui_AutoshifterWidget(QWidget):
    Current_RPM_Max_Value = 0
    Current_RPM_Value = 0
    Current_Gear_Value = 0

    TenpercentOfMax = 0

    IsAccelerating = False
    IsDecelerating = False

    Autoshifter_Speed_Data = linspace(0, 0, 50)

    GearChangeTime = None

    keyboard = None

    Downshift_Redline_Marks = linspace(0, 0, 10)
    Upshift_Redline_Marks = linspace(0, 0, 10)

    def __init__(self):
        super().__init__()
        self.keyboard = Controller()
        self.resize(500, 200)
        self.setStyleSheet("background-color: black; color: white;")
        self.setObjectName("AccelerationTestHistory")
        self.setObjectName("AutoshifterWidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(-1, -1, 501, 201))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(6)
        self.verticalLayout.setObjectName("verticalLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setScaledContents(True)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setWordWrap(True)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(-1, 0, -1, -1)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.RPM_Label = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.RPM_Label.setFont(font)
        self.RPM_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.RPM_Label.setObjectName("RPM_Label")
        self.horizontalLayout.addWidget(self.RPM_Label)
        self.CurrentGear_Label = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.CurrentGear_Label.setFont(font)
        self.CurrentGear_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.CurrentGear_Label.setObjectName("CurrentGear_Label")
        self.horizontalLayout.addWidget(self.CurrentGear_Label)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton.setMinimumSize(QtCore.QSize(150, 50))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("QPushButton { background: green; color: white; }")
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_2.addWidget(self.pushButton)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem3)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem4)

        self.retranslateUi(self)
        QtCore.QMetaObject.connectSlotsByName(self)

        self.UpdateAutoshifterLabelsTimer = QtCore.QTimer()
        self.UpdateAutoshifterLabelsTimer.timeout.connect(self.UpdateAutoshifterLabels)
        self.UpdateAutoshifterLabelsTimer.start(200)

    def retranslateUi(self, AutoshifterWidget):
        _translate = QtCore.QCoreApplication.translate
        AutoshifterWidget.setWindowTitle(_translate("AutoshifterWidget", "Autoshifter"))
        self.label.setText(_translate("AutoshifterWidget", "\"Automagically\" changes gear."))
        self.RPM_Label.setText(_translate("AutoshifterWidget", "RPM"))
        self.CurrentGear_Label.setText(_translate("AutoshifterWidget", "Gear"))
        self.pushButton.setText(_translate("AutoshifterWidget", "ENABLE"))

    def UpdateAutoshifterLabels(self):
        self.CurrentGear_Label.setText("Gear #"+str(int(self.Current_Gear_Value)))
        self.RPM_Label.setText("RPM => "+str(int(self.Current_RPM_Value)))
        if len(self.Downshift_Redline_Marks) > 0:
            print('downshifts => '+str(self.Downshift_Redline_Marks))
        if len(self.Upshift_Redline_Marks) > 0:
            print('upshifts => '+str(self.Upshift_Redline_Marks))

    def Add_Speed(self, value):
        self.Autoshifter_Speed_Data[:-1] = self.Autoshifter_Speed_Data[1:]
        self.Autoshifter_Speed_Data[-1] = float(value)

    def Add_RedlineMark(self, redline, shift):
        if shift == 'up':
            self.Upshift_Redline_Marks[:-1] = self.Upshift_Redline_Marks[1:]
            self.Upshift_Redline_Marks[-1] = redline
        elif shift == 'down':
            self.Downshift_Redline_Marks[:-1] = self.Downshift_Redline_Marks[1:]
            self.Downshift_Redline_Marks[-1] = redline

    def CheckSpeed(self):
        LatestSpeed = self.Autoshifter_Speed_Data[-1]
        OldestSpeed = self.Autoshifter_Speed_Data[0]
        change = LatestSpeed - OldestSpeed
        #print(change)
        if change > 0:
            return True, change # gaining speed
        else:
            return False, change # losing speed

    def OnTelemetryData(self, data):
        if data['is_race_on'] == 1.0:
            # update data
            self.Add_Speed(int(float(data['speed'] * 2.236936)))
            self.Current_Gear_Value = data['gear'];
            self.Current_RPM_Value = data['current_engine_rpm'];
            self.Current_RPM_Max_Value = data['engine_max_rpm'];
            # reported max rpm from telemetry seems to be a little off(?) its very rare that it actually hits the projected redline
            # the in game  grap seems to be maybe 600rpm under what it is reporting
            percentageMaxRPM = (data['engine_max_rpm'] * 0.1)
            self.Current_RPM_Max_Value = (data['engine_max_rpm'] - percentageMaxRPM) 
            accelPercent = float(data['accel'] / 255.0 * 100)
            brakePercent = float(data['brake'] / 255.0 * 100)
            if accelPercent > 0.0:
                self.IsAccelerating = True
            elif accelPercent == 0.0:
                self.IsAccelerating = False
            if brakePercent > 0.0:
                self.IsAccelerating = False
                self.IsDecelerating = True
            elif brakePercent == 0.0:
                self.IsDecelerating = False
            GainOrLossOfSpeed, ChangeInSpeed = self.CheckSpeed()
            WithinGearTimeDelay = False
            if self.GearChangeTime is None:
                WithinGearTimeDelay = True
            else:
                gearTimeDelta = time.time() - self.GearChangeTime
                #print("delta => "+str(gearTimeDelta))
                if gearTimeDelta > 0.5:
                    WithinGearTimeDelay = True
                else:
                    WithinGearTimeDelay = False
            if self.Current_RPM_Value > self.Current_RPM_Max_Value and self.IsAccelerating:
                self.Add_RedlineMark(self.Current_RPM_Value, 'up')
                print("pushing gear up")
                self.keyboard.press(UPSHIFT_KEY)
                self.keyboard.release(UPSHIFT_KEY)
                self.GearChangeTime = time.time()
            if self.Current_RPM_Value > self.Current_RPM_Max_Value and self.IsDecelerating:
                self.Add_RedlineMark(self.Current_RPM_Value, 'down')
                print("pushing gear down")
                self.keyboard.press(DOWNSHIFT_KEY)
                self.keyboard.release(DOWNSHIFT_KEY)
                self.GearChangeTime = time.time()


